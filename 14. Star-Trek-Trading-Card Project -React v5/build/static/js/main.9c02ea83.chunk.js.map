{"version":3,"sources":["mockdata/CardData.js","context/AppContext.js","components/Card/index.js","components/Card/Card.js","components/Deck/Deck.js","components/Deck/index.js","components/Store/index.js","components/Store/Store.js","components/Navbar/index.js","components/Navbar/Navbar.js","App.js","index.js"],"names":["initialCards","id","name","imgUrl","content","initialInventory","reduce","accum","el","initialDecks","cards","AppContext","createContext","useAppContext","useContext","AppContextProvider","props","myDeckRestore","localStorage","getItem","initialInventoryRestore","myInitialDeck","initialInventoryNew","split","map","e","acc","elem","idx","useState","inventory","decks","applicationState","updateApplicationState","BuyCardForPlayer","useCallback","cardId","currentInventory","currentMyDeck","push","setItem","Object","values","sellCardFromPlayer","idxCardSell","findIndex","cardObject","filter","Provider","value","buyCard","sellCard","children","Card","className","alt","src","getRows","numRows","Math","ceil","length","myCards","i","rows","nextRow","slice","card","index","onClick","Deck","useParams","deck","Store","Navbar","to","activeClassName","App","exact","path","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c02ea83.chunk.js","sourcesContent":["// Card Data contains constants which stand in for data loaded from a server\n// This will allow developers to focus on the concepts of React without worrying\n// about backend development or data fetching.\n//\n// 1. Cards - array of card objects\n// 2. Inventory - object tracking number of cards left in the store\n\nexport const initialCards = [\n    {\n        id: 0,\n        name: \"Martok\",\n        imgUrl: '/img/pic0.png', //\"http://guide.fleetops.net/images/avatars/martok.png\",\n        content: \"Ferocious Klingon\",\n    },\n    {\n        id: 1,\n        name: \"Mijural\",\n        imgUrl: '/img/pic1.png', //\"http://guide.fleetops.net/images/avatars/mijural.png\",\n        content: \"Shrike Class Romulan\",\n    },\n    {\n        id: 2,\n        name: \"Puretech\",\n        imgUrl: '/img/pic2.png', //\"http://guide.fleetops.net/images/avatars/puretech.png\",\n        content: \"Hypersapce Sensor System\",\n    },\n    {\n        id: 3,\n        name: \"Breen\",\n        imgUrl: '/img/pic3.png' ,//\"http://guide.fleetops.net/images/avatars/breen.png\",\n        content: \"Breen Battleship\",\n    },\n    {\n        id: 4,\n        name: \"Mayson\",\n        imgUrl: '/img/pic4.png', //\"http://guide.fleetops.net/images/avatars/mayson.png\",\n        content: \" Norway class Admiral\",\n    },\n    {\n        id: 5,\n        name: \"Risner\",\n        imgUrl: '/img/pic5.png' ,//\"http://guide.fleetops.net/images/avatars/risner.png\",\n        content: \"Phalanx class Admiral\",\n    },\n];\n\nexport const initialInventory = initialCards.reduce((accum, el) => {\n    accum[el.id] = 10;\n    return accum;\n}, {});\n\nexport const initialDecks = [\n    { name: \"My Deck\", cards: [] },\n    {\n        name: \"Danny Butterwick's Deck\",\n        cards: [initialCards[0], initialCards[1], initialCards[2]],\n    },\n]","import { createContext, useCallback, useContext, useState } from 'react';\nimport { initialCards, initialInventory, initialDecks } from '../mockdata/CardData';\n\nconst AppContext = createContext();\n\nexport const useAppContext = () => useContext(AppContext);\nexport function AppContextProvider(props) {\n\n    const myDeckRestore = localStorage.getItem('STAR_TREK_MY_DECK');\n    const initialInventoryRestore = localStorage.getItem('STAR_TREK_INVENTORY');\n    \n    let myInitialDeck = initialDecks[0];\n    let initialInventoryNew = initialInventory;\n    if (myDeckRestore) myInitialDeck.cards = myDeckRestore.split(',').map(e => initialCards[e]); \n\n    if(initialInventoryRestore) {\n      let initialInventoryRestoreArray = initialInventoryRestore.split(',');\n      initialInventoryNew = initialInventoryRestoreArray.reduce((acc, elem, idx) => { acc[idx] = elem; return acc}, {});\n    }\n    const [applicationState, updateApplicationState] = useState({inventory: initialInventoryNew, decks: [ myInitialDeck, initialDecks[1]] })\n\n    const BuyCardForPlayer = useCallback( (cardId) => {\n     \n      if (applicationState.inventory[cardId] === 0) return;\n      let currentInventory = {...applicationState.inventory};\n      let currentMyDeck = {...applicationState.decks[0]};\n         \n      currentInventory[cardId]--;\n        \n      currentMyDeck.cards.push(initialCards[cardId]);\n      updateApplicationState({inventory: currentInventory, decks: [currentMyDeck, applicationState.decks[1]]});\n      localStorage.setItem('STAR_TREK_MY_DECK', currentMyDeck.cards.map((e, acc) => e.id ));\n      localStorage.setItem('STAR_TREK_INVENTORY', Object.values(currentInventory));\n      \n    }\n    , [applicationState]);\n\n\n      const sellCardFromPlayer = useCallback((cardId) => {\n\n        let currentInventory = {...applicationState.inventory};\n        let currentMyDeck = {...applicationState.decks[0]};\n                  \n        currentInventory[cardId]++;\n        \n        let idxCardSell = currentMyDeck.cards.findIndex( cardObject => cardObject.id === cardId);\n        currentMyDeck.cards = currentMyDeck.cards.filter((cardObject, idx) => idx !== idxCardSell );\n        \n        updateApplicationState({inventory: currentInventory, decks: [currentMyDeck, applicationState.decks[1]]});\n        localStorage.setItem('STAR_TREK_MY_DECK', currentMyDeck.cards.map((e, acc) => e.id ));\n        localStorage.setItem('STAR_TREK_INVENTORY', Object.values(currentInventory));\n    }, [applicationState]);\n \n\n    return (\n      <AppContext.Provider value={{cards: initialCards, applicationState, buyCard: BuyCardForPlayer, sellCard: sellCardFromPlayer }}>\n        {props.children}\n      </AppContext.Provider>\n    )\n}","import Card from './Card';\n\nexport default Card;\n","import './card.css';\n\nconst Card = ({ imgUrl, content}) => {\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image\">\n          <img alt=\"card face\" src={imgUrl}/>\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"content\">{content}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { useParams } from 'react-router-dom'\nimport { useAppContext } from '../../context/AppContext';\nimport Card from \"../Card\";\n\nconst Deck = () => {\n\n  const { id } = useParams();\n  const { applicationState, sellCard } = useAppContext();\n\n  const decks = applicationState.decks;\n  const deck = decks[id];\n\n  return (\n    <div>\n      <h2>{deck.name}</h2>\n      {getRows(deck.cards, sellCard)}\n    </div>\n  );\n};\n\n// Helper function(s)\n\nconst getRows = (cards, sellCard) => {\n  const numCols = 6;\n  const numRows = Math.ceil(cards.length/numCols)\n\n  // Pad the card list so it's an exact multiple of the number of columns\n  const myCards = [...cards];\n  for (let i=0; i<cards.length % numCols; i++) {\n    myCards.push(null);\n  }\n\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    // Pull out just the cards for this row\n    const nextRow = myCards.slice(i * numCols, (i+1) * numCols)\n    rows.push(\n      <div key={i} className=\"columns\">\n        {nextRow.map((card, index) => (\n          <div key={index} className=\"column is-one-sixth\">\n            \n            {card && ((\n               <button className=\"button\" onClick={() => sellCard(card.id)}>\n                  <small> Sell (in stock) </small>\n                </button> \n            ) )}\n            {card && ((\n                <Card\n                  imgUrl={card.imgUrl}\n                  content={card.content}\n                /> \n            ) )}\n          </div>\n        ))}\n      </div>\n    );\n  }\n  return rows;\n};\n\nexport default Deck;","import Deck from './Deck';\n\nexport default Deck;\n","import Store from './Store';\n\nexport default Store;\n","import Card from \"../Card\";\nimport { useAppContext } from \"../../context/AppContext\";\nimport { useEffect } from \"react\";\n\nconst Store = () => {\n  const { cards, applicationState, buyCard } = useAppContext();\n  const { inventory } = applicationState;  \n\n  return (\n    <div>\n      <h2 className=\"title is-2\">Store Inventory</h2>\n      <div className=\"columns\">\n        {cards.map((card) => (\n          <div key={card.id} className=\"column is-one-sixth\">\n            <button className=\"button\" onClick={() => buyCard(card.id)}>\n              <small>Buy ({inventory[card.id]} in stock)</small>\n            </button>\n            <Card imgUrl={card.imgUrl} content={card.content} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Store;","import Navbar from './Navbar';\n\nexport default Navbar;\n","import { NavLink } from \"react-router-dom\";\nimport { useAppContext } from \"../../context/AppContext\";\n\nconst Navbar = () => {\n    const { applicationState } = useAppContext();\n    const decks = applicationState.decks;\n\n    return (\n        <div className=\"navbar\">\n            <div className=\"navbar-menu\">\n                <NavLink\n                    to={`/store`}\n                    activeClassName=\"is-selected\"\n                    className=\"navbar-item\"\n                >\n                    Shop\n                </NavLink>\n                {decks.map((deck, i) => {\n                    return (\n                        <NavLink\n                            to={`/deck/${i}`}\n                            className=\"navbar-item\"\n                            activeClassName=\"is-selected\"\n                            key={i}\n                        >\n                            {deck.name}\n                        </NavLink>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Navbar;","import { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Deck from \"./components/Deck\";\nimport Store from \"./components/Store\";\nimport Navbar from \"./components/Navbar\";\n\nimport { useAppContext } from \"./context/AppContext\";\n\n\nconst App = () => {\n  return (\n    <>\n      <h1 className=\"title is-1\">Star Trek Trading Card Store!</h1>\n      <p>\n        Here you can buy and sell cards in order to build your ultimate deck!\n      </p>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/store\">\n            <Store />\n          </Route>\n          <Route path=\"/deck/:id\">\n            <Deck />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/store\" />\n          </Route>\n        </Switch>\n    </>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { AppContextProvider } from './context/AppContext'\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nfunction Root() {\n  return (\n    <BrowserRouter>\n     <AppContextProvider>\n        <App />\n      </AppContextProvider>\n    </BrowserRouter>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}