STEPS:



-------------------------------------- STEP 1 - 3: creeare DB ------------------------------------------
STEP 1:
      -> psql 
         create user amusement_park_tracker_with_users_app with password 'amusement_park_tracker_with_users_app dbcreate'create user amusement_park_tracker_with_users_app with password 'amusement_park_tracker_with_users_app' createdb;

         NOTE: logata cu admin (adrianaclaudia)

STEP 2: 
      set role amusement_park_tracker_with_users_app;


STEP 3: create database amusement_park_tracker_with_users with Owner amusement_park_tracker_with_users_app;



-----------------------------STEP 4 - 5:setup: INSTALL packages & create Tbs-----------------------------

STEP 3: 
        cd in dir root app (unde exista package.json)
        -> npm install
STEP 4:   
       -> npx dotenv sequelize db:migrate 

STEP 5: 
       -> npx dotenv sequelize db:migrate



---------------------------------STEP 6- 9 - DB create User model ---------------------------------    

STEP 6:
       npx sequelize model:generate \
        > --name User \
        > --attributes firstName:string,lastName:string,emailAddress:string,hashedPassword:string


STEP 7:  
      make modification in migrations/[timestamp]-create-user.js

                   Example: 
                       'use strict';
                        module.exports = {
                        up: (queryInterface, Sequelize) => {
                            return queryInterface.createTable('Users', {
                            id: {
                                allowNull: false,
                                autoIncrement: true,
                                primaryKey: true,
                                type: Sequelize.INTEGER
                            },
                            firstName: {    
                                allowNull: false,
                                type: Sequelize.STRING(50)
                            },
                            lastName: {    
                                allowNull: false,
                                type: Sequelize.STRING(50)
                            },
                            emailAddress: {    
                                allowNull: false,
                                type: Sequelize.STRING(255),
                                unique: true
                            },
                            hashedPassword: {    
                                allowNull: false,
                                type: Sequelize.STRING.BINARY
                            },
                            createdAt: {
                                allowNull: false,
                                type: Sequelize.DATE
                            },
                            updatedAt: {
                                allowNull: false,
                                type: Sequelize.DATE
                            }
                            });
                        },
                        down: (queryInterface, Sequelize) => {
                            return queryInterface.dropTable('Users');
                        }
                        };



STEP 8:  
      make modification in models/user.js
                    Example: 
                        'use strict';
                            module.exports = {
                            up: (queryInterface, Sequelize) => {
                                return queryInterface.createTable('Users', {
                                id: {
                                    allowNull: false,
                                    autoIncrement: true,
                                    primaryKey: true,
                                    type: Sequelize.INTEGER
                                },
                                firstName: {    
                                    allowNull: false,
                                    type: Sequelize.STRING(50)
                                },
                                lastName: {    
                                    allowNull: false,
                                    type: Sequelize.STRING(50)
                                },
                                emailAddress: {    
                                    allowNull: false,
                                    type: Sequelize.STRING(255),
                                    unique: true
                                },
                                hashedPassword: {    
                                    allowNull: false,
                                    type: Sequelize.STRING.BINARY
                                },
                                createdAt: {
                                    allowNull: false,
                                    type: Sequelize.DATE
                                },
                                updatedAt: {
                                    allowNull: false,
                                    type: Sequelize.DATE
                                }
                                });
                            },
                            down: (queryInterface, Sequelize) => {
                                return queryInterface.dropTable('Users');
                            }
                            };


STEP 9: 
       npx dotenv sequelize db:migrate 



---------------------------------STEP 10 - 13: configure express to use session---------------------------------  


STEP 10: 
         npm install express-session

STEP 11:  ->  .env
          SESSION_SECRET= ...; // UID
            
         NOTA: se poate genera un uid cu ajutorul node package: npm install uuid   
               https://www.npmjs.com/package/uuid

STEP 12:   -> config/index.js:
                .....

           sessionSecret: process.env.SESSION_SECRET,

                ....

STEP 13: app.js
        const { secretSession } = require('./config');
        const session = require('express-session');

        ......
        app.use(cookieParser(secretSession));
        app.use(session({
            name: 'amusement_park_tracker_with_users.sid',
            secret: secretSession,
            resave: false,
            saveUninitialized: false
        }));

        app.use(router1);
        ...............n..........


---------------------------------STEP 14 - 18: support user self registration---------------------------------  
STEP 14: 
          create user.js
           
            14.1.0   const express = require('express');
            14.1.1   const { csrfProtection, asyncHandler } = require('./utils.js');
            14.1.2   const db = require('../db/models');
            14.1.3   const { check, validateResult } = require('express-validator');

            14.2.0   const router = express.Router();


            14.3.0  - create  handler router for /user/register'
                      14.3.1 get:
                         
                                           
                                router.get('/user/register', csrfProtection, (req, res) => {
                                const user = db.User.build({});

                                res.render('user-register', {
                                    title: 'Register User',
                                    user,
                                    csrfToken: req.csrfToken()
                                });
                                });

                      14.3.2 post:

            14.4.0 - create pug: user-register   

            14.5.1 - export module
                       module.exports = router;
            14.5.2 - import module in app.js
                        ............
                         const userRoutes = require('./routes/user');
                                ..
                         app.use(userRoutes);



           14.6.0 - ------------makes validations------------
                    14.6.1    const { check, validatorResult } = require('express-validator');
                    14.6.2    const userValidation = [
                                                        check('firstName')
                                                           .exists({checkFalsy: true})
                                                            .withMessage('Please provid a value for First Name')
                                                            .isLength({max: 50})
                                                            .withMessage('Please provid a value for First Name less then 50 chars long'),
                              ]




                          





